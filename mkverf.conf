tagPrefix: ""
# defaults are used if they are not overriden by a branch config
defaults {
  # whether to really tag the branch when `git mkver tag` is called
  tag: false
  # message for annotated version tags in git
  tagMessageFormat: "release {Tag}"
  # format tring for the pre-release. The format must end with {PreReleaseNumber} if it is used.
  # Examples:
  # * alpha
  # * SNAPSHOT
  # * RC{PreReleaseNumber}
  # * pre-{CommitsSinceTag}
  preReleaseFormat: "RC{PreReleaseNumber}"
  # whether to include the build metadata in the Semantic Version when next or tag are called
  includeBuildMetaData: false
  # action to take, if after analyzing all commit messages since the last tag
  # no increment instructions can be found. Options are:
  # * Fail - application will exit
  # * IncrementMajor - bump the major version
  # * IncrementMinor - bump the minor version
  # * IncrementPatch - bump the patch version
  # * NoIncrement - no version change will occur
  whenNoValidCommitMessages: NoIncrement

  # list of formats
  formats: [
    {
      name: Docker
      format: "{Version}"
    }
    {
      name: DockerBranch
      format: "{Version}.{Branch}.{ShortHash}"
    }
  ]
}
# branch specific overrides of the default config
# name is a regular expression
# branches are tried for matches in order
branches: [
  {
    pattern: "main"
    tag: true
    includeBuildMetaData: false
  }
  {
    pattern: ".*"
    tag: false
    formats: [
      {
        name: Docker
        format: "{DockerBranch}"
      }
    ]
  }
]

# commitMessageActions configure how different commit messages will increment
# the version number
commitMessageActions: [
  {
    # pattern is a regular expression to occur in a single line
    pattern: "BREAKING CHANGE"
    # action is one of:
    # * Fail - application will exit
    # * IncrementMajor - bump the major version
    # * IncrementMinor - bump the minor version
    # * IncrementPatch - bump the patch version
    # * NoIncrement - no version change will occur
    action: IncrementMajor
  }
  {
    pattern: "major(\\(.+\\))?:"
    action: IncrementMajor
  }
  {
    pattern: "minor(\\(.+\\))?:"
    action: IncrementMinor
  }
  {
    pattern: "feat(\\(.+\\))?:"
    action: IncrementMinor
  }
  {
    pattern: "patch(\\(.+\\))?:"
    action: IncrementPatch
  }
  {
    pattern: "fix(\\(.+\\))?:"
    action: IncrementPatch
  }
]